services:
  postgres:
    image: pgvector/pgvector:pg15
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  graphql-engine:
    image: hasura/graphql-engine:v2.46.0
    ports:
      - "3001:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      PG_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      ## enable debugging mode in dev & disable in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
       ## TODO: JWT configuration for authentication in later stages
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256","key":"${AUTH_SECRET}","claims_map":{"x-hasura-allowed-roles":["user"],"x-hasura-default-role":"user","x-hasura-user-id":{"path":"$.sub"}}}'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
      HASURA_GRAPHQL_CORS_DOMAIN: "*"
    depends_on:
      postgres:
        condition: service_healthy
volumes:
  db_data: